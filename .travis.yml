# Specify programming language
language: cpp

# This Travis CI files is organized in stages.
# Stages run sequentially, each of which consist of multiple parallel jobs.
# More details and examples are available here: https://docs.travis-ci.com/user/build-stages/
# The advantage of stages over a simple and standard build matrix is that we
# can set, for each job in a stage, specific environmental variables.
# In this way, we can set up different dockers images under Linux OS to test
# different distros while also setting up jobs for macOS. With a standard
# build matrix we would have been forced to use only one distro.

# Specify The order to which stages are run
stages:
    - release
    - debug

# Here we specify the jobs.
# It is convenient to have external Bash scripts to run our CI test.
# Scripts are located in .ci folders: some are common for both Linux and macOS,
# other are more specific targeting either one of the two OSs.
jobs:
    include:
        - &linux_stage # This is a reference name that can be used as starting point for other Linux jobs
          stage: release
          os: linux
          compiler: gcc
          services: docker # We use docker to test both Xenial and Bionic distros
          env: # Here we set Xenial and Release build
              UBUNTU="xenial"
              TRAVIS_BUILD_TYPE="Release"
          before_install: skip
          install: skip
          before_script:
              - docker pull ubuntu:$UBUNTU
          script: # Here we use a Linux-specific Bash script, .ci/stage_linux.sh, to test our code
              - docker run -it -v $TRAVIS_BUILD_DIR:$TRAVIS_BUILD_DIR -v $HOME/.ccache:$HOME/.ccache -w $TRAVIS_BUILD_DIR  --env CC --env CXX --env TRAVIS_BUILD_DIR --env TRAVIS_BUILD_TYPE --env TRAVIS_CMAKE_GENERATOR ubuntu:$UBUNTU bash .ci/stage_linux.sh
          after_failure: skip
          after_success: skip
          after_script: skip
        - <<: *linux_stage # This jobs is based on 'linux_stage', overwriting some parameters
          stage: release
          compiler: gcc
          env:  # Here, insted, we set Bionic and Release build
              UBUNTU="bionic"
              TRAVIS_BUILD_TYPE="Release"
        - <<: *linux_stage # This jobs is based on 'linux_stage', overwriting some parameters
          stage: release
          compiler: clang
          env:  # Here, insted, we set Bionic and Release build
              UBUNTU="xenial"
              TRAVIS_BUILD_TYPE="Release"
        - <<: *linux_stage # This jobs is based on 'linux_stage', overwriting some parameters
          stage: release
          compiler: clang
          env:  # Here, insted, we set Bionic and Release build
              UBUNTU="bionic"
              TRAVIS_BUILD_TYPE="Release"
        - <<: *linux_stage
          stage: debug
          env:
              UBUNTU="xenial"
              TRAVIS_BUILD_TYPE="Debug"
        - <<: *linux_stage
          stage: debug
          env:
              UBUNTU="bionic"
              TRAVIS_BUILD_TYPE="Debug"
        - <<: *linux_stage
          stage: debug
          compiler: clang
          env:
              UBUNTU="xenial"
              TRAVIS_BUILD_TYPE="Debug"
        - <<: *linux_stage
          stage: debug
          compiler: clang
          env:
              UBUNTU="bionic"
              TRAVIS_BUILD_TYPE="Debug"
        - &osx_stage # This is a reference name that can be used as starting point for other macOS jobs
          stage: release
          os: osx
          compiler: clang
          osx_image: xcode9.4
          env:
              TRAVIS_BUILD_TYPE="Release"
          before_install: skip
          install: skip
          before_script: skip
          script: # Here we use a macOS-specific Bash script, .ci/stage_macos.sh, to test our code
              - bash ./.ci/stage_macos.sh
          after_failure: skip
          after_success: skip
          after_script: skip
        - <<: *osx_stage
          stage: release
          compiler: gcc
          env:
            TRAVIS_BUILD_TYPE="Release"
        - <<: *osx_stage
          stage: debug
          compiler: clang
          env:
            TRAVIS_BUILD_TYPE="Debug"
        - <<: *osx_stage
          stage: debug
          compiler: gcc
          env:
            TRAVIS_BUILD_TYPE="Debug"
